spring:
  main:
    #	是否允许使用相同名称重新注册不同的bean实现.(spring默认是允许,SpringBoot默认无值即false)
    # 不配置此项会报找不到数据源
    allow-bean-definition-overriding: true
  shardingsphere:
    # 数据源 (可配置多数据源)
    datasource:
      names: m1
      m1:
        #	数据库驱动,url.........
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/snowy-cloud?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
        username: root
        password: root123
        # 数据源其他配置
        initialSize: 5
        minIdle: 10
        maxActive: 200
        maxWait: 60000
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: SELECT 1 FROM DUAL
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        #filters: stat,wall,log4j
        maxPoolPreparedStatementPerConnectionSize: 20
        #useGlobalDataSourceStat: true
        #connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
    sharding:
      # shardingJdbc虚拟表(可配置多张表)
      tables:
        t_order: # 数据库中已经分表的表逻辑表
          actual-data-nodes: m1.CLIENT_USER_$->{1..2}
          # 指定t_order表的主键生成策略
          key-generator:
            column: ID # 主键列
            type: SNOWFLAKE # 策略算法类型为SNOWFLAKE(雪花算法，实现全局主键自增)
          # 指定t_order表的分片策略，分片策略包括分片键和分片算法
          table-strategy:
            inline:
              sharding-column: ID # 以 order_id 为分片键
              algorithm-expression: CLIENT_USER_$->{ID % 2 + 1} # order_id 取模进行分片，如 order_id 尾数为偶数则存入 t_order_1中，否则存入 t_order_2 中
      bindingTables:
        #- lis_sample,lis_sorting
        - CLIENT_USER,ORDER
    # 打印日志
    props:
      sql.show: true


